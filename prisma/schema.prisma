// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String   @unique
  password     String
  registeredAt DateTime @default(now())
  role         Role?    @default(USER)
  
  // Relations
  bookings     Booking[]

  @@map("users")
}

model Event {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  date          DateTime
  location      String
  thumbnailUrl  String?       // Main thumbnail for lists
  bannerUrl     String?       // Banner/cover image
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  tickets       Ticket[]
  ticketClasses TicketClass[]
  images        EventImage[]  // Multiple main images

  @@map("events")
}

model EventImage {
  id          Int      @id @default(autoincrement())
  eventId     Int
  imageUrl    String
  altText     String?  // Alt text for accessibility
  displayOrder Int     @default(0) // For ordering images in gallery
  isPrimary   Boolean  @default(false) // Mark one as primary/featured
  createdAt   DateTime @default(now())
  
  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@map("event_images")
}

enum TicketStatus {
  AVAILABLE
  SOLD
  RESERVED
}

model TicketClass {
  id          Int      @id @default(autoincrement())
  eventId     Int
  name        String   // VIP, Premium, Standing, etc.
  description String?
  price       Decimal
  totalCount  Int      // Total tickets available for this class
  soldCount   Int      @default(0)
  createdAt   DateTime @default(now())
  
  // Relations
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets     Ticket[]
  
  @@unique([eventId, name])
  @@map("ticket_classes")
}

model Ticket {
  id            Int           @id @default(autoincrement())
  eventId       Int
  ticketClassId Int
  bookingId     Int?
  seatNumber    String?       // Optional seat number
  status        TicketStatus  @default(AVAILABLE)
  
  // Relations
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketClass   TicketClass   @relation(fields: [ticketClassId], references: [id], onDelete: Cascade)
  booking       Booking?      @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@map("tickets")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id        Int           @id @default(autoincrement())
  userId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    BookingStatus @default(PENDING)
  
  // Relations
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tickets   Ticket[]

  @@map("bookings")
}


